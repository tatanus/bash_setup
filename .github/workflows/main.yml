name: Bash Project CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate_permissions:
    name: Validate workflow permissions blocks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install PyYAML
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pyyaml

      - name: Ensure each workflow has a top-level permissions block
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import sys, glob, yaml, os
          failures = []
          files = glob.glob('.github/workflows/*.yml') + glob.glob('.github/workflows/*.yaml')
          if not files:
              print("No workflow files found.")
              sys.exit(0)
          for f in sorted(files):
              try:
                  with open(f, 'r', encoding='utf-8') as fh:
                      data = yaml.safe_load(fh)
              except Exception as e:
                  print(f"[ERROR] YAML parse error in {f}: {e}", file=sys.stderr)
                  failures.append(f)
                  continue
              if not isinstance(data, dict) or 'permissions' not in data:
                  print(f"[ERROR] Missing top-level 'permissions:' in {f}", file=sys.stderr)
                  failures.append(f)
          if failures:
              print(f"\nWorkflows missing permissions or invalid: {', '.join(failures)}", file=sys.stderr)
              sys.exit(1)
          print("All workflows include a top-level permissions block.")
          PY

  validate_actions:
    name: Lint GitHub Actions (actionlint)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      - uses: reviewdog/action-actionlint@v1
        with:
          actionlint_flags: -color=never

  lint:
    name: ShellCheck
    needs: [validate_permissions, validate_actions]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install tools (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y shellcheck git gawk

      - name: Install tools (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          set -euo pipefail
          brew update
          brew install shellcheck gawk git || true

      - name: ShellCheck (all shell scripts)
        run: |
          set -euo pipefail
          mapfile -t files < <(git ls-files | grep -E '\.(sh|bash)$|(^|/)bash(rc|_profile|_login)$' || true)
          if [ "${#files[@]}" -gt 0 ]; then
            shellcheck --severity=warning --external-sources --wiki-link-count=0 --source-path=SCRIPTDIR --format=tty "${files[@]}"
          else
            echo "No shell files detected."
          fi

  format:
    name: shfmt (check formatting)
    needs: [validate_permissions, validate_actions]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v5

      - name: Install shfmt (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y shfmt

      - name: Install shfmt (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          set -euo pipefail
          brew update
          brew install shfmt || true

      - name: Verify formatting with shfmt
        run: |
          set -euo pipefail
          # Match your repo's style flags
          shfmt -i 4 -ci -bn -kp -sr -ln bash -d .

  test:
    name: Tests (if present)
    needs: [lint, format]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Run tests
        shell: bash
        run: |
          set -euo pipefail
          if [ -f Makefile ] && grep -q '^test:' Makefile; then
            make test
          elif [ -d tests ]; then
            echo "No explicit test runner; listing tests:"
            find tests -type f -maxdepth 2 -print
          else
            echo "No tests found."
          fi

  secret_scan:
    name: Secret Scan (gitleaks)
    needs: [lint, format]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: gitleaks.toml
          fail: true