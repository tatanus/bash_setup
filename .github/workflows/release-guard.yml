name: Release Guard

on:
  push:
    tags: ['v*']
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: release-guard-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify-release-readiness:
    name: Verify metadata & submodules
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner (audit egress)
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Show tag context
        shell: bash
        run: |
          set -euo pipefail
          echo "GITHUB_REF=${GITHUB_REF}"
          echo "TAG=${GITHUB_REF#refs/tags/}"

      - name: Verify VERSION, CITATION.cff, and CHANGELOG
        shell: bash
        run: |
          set -euo pipefail

          # Tag without the leading 'v'
          tag="${GITHUB_REF#refs/tags/v}"
          echo "Verifying against tag: $tag"

          # 1) VERSION must equal tag
          [[ -f VERSION ]] || { echo "::error::Missing VERSION file"; exit 1; }
          ssot="$(sed -n '1{s/^[[:space:]]*//;p;q}' VERSION)"
          echo "VERSION=$ssot"
          [[ "$ssot" == "$tag" ]] || { echo "::error::VERSION ($ssot) != tag ($tag)"; exit 1; }

          # 2) CITATION.cff version/date
          [[ -f CITATION.cff ]] || { echo "::error::Missing CITATION.cff"; exit 1; }
          cit_ver="$(awk -F': ' '/^version:/{gsub(/"/,"",$2); print $2; exit}' CITATION.cff)"
          cit_date="$(awk -F': ' '/^date-released:/{gsub(/"/,"",$2); print $2; exit}' CITATION.cff)"
          echo "CITATION.cff version=$cit_ver date-released=$cit_date"

          [[ "$cit_ver" == "$tag" ]] || { echo "::error::CITATION.cff version ($cit_ver) != tag ($tag)"; exit 1; }
          [[ "$cit_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || { echo "::error::CITATION.cff date-released invalid: $cit_date"; exit 1; }
          today="$(date +%F)"
          if [[ "$cit_date" > "$today" ]]; then
            echo "::error::CITATION.cff date-released ($cit_date) is in the future (today=$today)"
            exit 1
          fi

          # 3) CHANGELOG must contain a section for the tag
          chlog="docs/CHANGELOG.md"
          [[ -f "$chlog" ]] || { echo "::error::Missing $chlog"; exit 1; }
          if ! grep -qE "^## \\[$tag\\]" "$chlog"; then
            echo "::error::CHANGELOG lacks section for [$tag]"
            exit 1
          fi
          echo "CHANGELOG has section for [$tag]"

      - name: Verify submodules are synced, initialized, and clean
        shell: bash
        run: |
          set -euo pipefail

          if [[ ! -f .gitmodules ]]; then
            echo "No .gitmodules present; skipping submodule checks."
            exit 0
          fi

          echo "Syncing submodule URLs..."
          git submodule sync --recursive

          echo "Initializing/updating submodules..."
          git submodule update --init --recursive

          echo "Checking submodule status..."
          # git submodule status prefixes:
          #  ' ' = OK, at expected commit
          #  '-' = not initialized
          #  '+' = checked out at different commit than recorded
          #  'U' = merge conflicts
          bad="$(git submodule status --recursive | grep -E '^[+-]|^U' || true)"
          if [[ -n "$bad" ]]; then
            echo "::error::Submodule(s) not at expected state:"
            echo "$bad"
            echo "Hint: ensure submodule commits are updated and committed in the superproject."
            exit 1
          fi

          echo "Submodules look good."

      # Optional: sanity run of a lightweight CI step on the tag
      - name: Smoke CI (ShellCheck + shfmt list only)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y shellcheck shfmt >/dev/null
          echo "Listing .sh files (lint/format is already covered in main CI):"
          find . -type f -name "*.sh" -print

